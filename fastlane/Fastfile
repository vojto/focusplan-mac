fastlane_version "2.28.7"

default_platform :ios

platform :ios do
  before_all do
    # carthage
  end

  def suite_id_beta
    "tech\\.median"
  end

  def suite_id_dev
    "t3ch\\.m3dian"
  end

  def files_with_suite_id
    project_dir = File.expand_path(File.join(File.dirname(__FILE__), '..'))
    
    return [
      File.join(project_dir, 'FocusPlan.xcodeproj', 'project.pbxproj'),
    ]
  end

  def rewrite_from_all(files, to)
    rewrite_files(files_with_suite_id, suite_id_dev, to)
    rewrite_files(files_with_suite_id, suite_id_beta, to)
  end

  def rewrite_files(files, from, to)
    rewrite_exact_files(files, from, to)
  end

  def rewrite_exact_files(files, from, to)
    files.each do |file|
      Actions.sh("sed -i '' 's/#{from}/#{to}/g' #{file}")
    end
  end

  lane :enable_trial do
    project_dir = File.expand_path(File.join(File.dirname(__FILE__), '..'))
    file = File.join(project_dir, 'FocusPlan', 'Config.swift')
    from = "isTrial = false"
    to = "isTrial = true"

    Actions.sh("sed -i '' 's/#{from}/#{to}/g' #{file}")
  end

  lane :disable_trial do
    project_dir = File.expand_path(File.join(File.dirname(__FILE__), '..'))
    file = File.join(project_dir, 'FocusPlan', 'Config.swift')
    from = "isTrial = true"
    to = "isTrial = false"

    Actions.sh("sed -i '' 's/#{from}/#{to}/g' #{file}")
  end

  # lane :switch_to_beta do
  #   rewrite_from_all(files_with_suite_id, suite_id_beta)
  # end

  # lane :switch_to_dev do
  #   rewrite_from_all(files_with_suite_id, suite_id_dev)
  # end

  lane :bump do
    increment_build_number
  end

  lane :trial do
    increment_build_number

    enable_trial

    project_dir = File.expand_path(File.join(File.dirname(__FILE__), '..'))

    build_dir = File.join(project_dir, "build")

    system("rm -rf #{build_dir}")

    # switch_to_beta

    build_dir = gym(
      scheme: "FocusPlan",
      output_directory: build_dir,
      codesigning_identity: "Developer ID",
      archive_path: File.join(project_dir, "build", "archive")
    )

    app_path = File.join(build_dir, "FocusPlan.app")

    build_dir = File.dirname(app_path)
    dsym_path = File.join(build_dir, "FocusPlan.app.dSYM.zip")

    # switch_to_dev

    # Deploy locally...
    # Actions.sh "killall FocusPlan || date"
    # Actions.sh "rm -rf /Applications/FocusPlan.app"
    # puts "Copying " + "cp #{app_path} /Applications"

    # system("open #{build_dir}")

    zip_path = app_path + ".zip"
    app_filename = File.basename(app_path)
    Actions.sh("pushd #{build_dir} && zip -y -r #{zip_path} #{app_filename}/* && popd")

    hockey(
      :api_token => "aec6fd6f1ad54a5686fca0b5a7916710",
      :ipa => zip_path,
      :dsym => dsym_path
    )

    disable_trial

    # Actions.sh "mv #{app_path} /Applications"
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

